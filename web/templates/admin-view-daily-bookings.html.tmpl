{{template "layout.html.tmpl" .}}
{{ define "PageStyle"}}
style="background-color: #D1C3F3;"
{{end}}
{{define "body"}}
<div class="admin-view">
<div class="flex-container">
	<script src="/static/js/admin/form-http-methods.js"></script>
	<h1 style="white-space: nowrap;">Daily Bookings</h1>
	<div class="flex-container" style="justify-content: right;">
		<button onclick="window.location.href=window.location.origin + '/admin/availability?date=' + new URLSearchParams(window.location.search).get('date')" style="flex: 0;">SLOT AVAILABILITY</button>
		<button onclick="window.location.href='/admin/bookings/new'" style="flex: 0;">NEW BOOKING</button>
		<button onclick="window.location.href='/admin/bookings/all'" style="flex: 0;">ALL BOOKINGS</button>
	</div>
</div>
<button onclick="window.location.href='/admin/codes'" style="flex: 0;">CODES</button>
<!-- Date Selection -->
<div class="date-selection">
	<h3>Pick your date:</h3>
	<!--  Date picker for booking -->
	<div class="flex-container">
		<button type="button" id="prev-day">← Previous Day</button>
		<input type="date" id="date-input" name="date">
		<button type="button" id="next-day">Next Day →</button>
		<script src="/static/js/date-picker-functions.js"></script>
	</div>
	<div style="display: flex; gap: 5px; align-items: center; flex-wrap: wrap;">
		<h3>LEGEND:</h3>
		<p class="legend paid">PAID</p>
		<p class="legend unpaid">UNPAID</p>
		<p class="legend regulars">REGULAR</p>
		<p class="legend cancelled">CANCELLED</p>
		<p class="legend rec-room">REC-ROOM FLAG</p>
	</div>
</div>

<div id="bookings-container">
	<div class="date-group" data-date="{{.Date}}">
    <h2>{{.Date}}</h2>
	{{ range .Bookings }}
		{{ if eq .Status "cancelled" }}
		<div class='bookings-panel cancelled'>
			<div class="admin-panel">
				<h3>Booking ID: #{{.Id}}</h3>
				<p><strong>Room: </strong>{{.RoomName}}</p>
				<p><strong>Booking Time: </strong>{{.StartTime.Format "15:04"}}-{{.EndTime.Format "15:04"}}</p>
			</div>
			<div class="admin-panel">
				<h3>BOOKING CANCELLED</h3>
				<hr>
				<h3>Booking Details</h3>
                <p><strong>Transaction ID: </strong>{{.TransactionId}}</p>
				<p><strong>Created At: </strong>{{.CreatedAt.Format "2006-01-02 15:04"}}</p>			
				<p><strong>Cancelled At: </strong>{{.CancelledAt.Format "2006-01-02 15:04"}}</p>
			</div>
			<div>
				<button class="admin-update" onclick="window.location.href='/admin/bookings/{{.Id}}/edit'">Update</button>
				<form action="/admin/bookings/{{.Id}}" method="DELETE" onsubmit="return confirm('Are you sure you want to delete this booking?');">
					<button>Delete</button>
				</form>
			</div>
		</div>	
		{{ else }}
		<div class='bookings-panel {{ if eq .PaymentMethod "regulars"}}regulars{{else if eq .Status "paid"}}paid{{else}}unpaid{{end}} {{if eq .RoomName "Rec Room"}}rec-room{{end}}'>
			<div class="admin-panel">
				<h3>Booking ID: #{{.Id}}</h3>
				<p><strong>Room: </strong>{{.RoomName}}</p>
				<p><strong>Booking Time: </strong>{{.StartTime.Format "15:04"}}-{{.EndTime.Format "15:04"}}</p>
				<p><strong>Session Type: </strong>{{.Type}}</p>
				<p><strong>Cymbals: </strong>{{if .Cymbals}}Yes{{else}}No{{end}}</p>
				<p><strong>Price: </strong>£{{.Price}} (+ Discount £{{.DiscountAmount}})</p>
				<p><strong>Payment Method: </strong>{{.PaymentMethod}}</p>
				<p><strong>Status: </strong>{{.Status}}</p>
				<p><strong>Booking Notes: </strong>{{.BookingNotes}}</p>

				<div>
					<strong>Codes Message:</strong>
					<pre id="booking-codes-message" style="white-space: pre-wrap;">{{.BookingCodesMessage}}</pre>
					<script>
					/**
					 * Adds click-to-copy functionality to an HTML element with mobile support
					 * @param {string} selector - CSS selector for the element(s) to make copyable
					 */
					function makeElementsCopyable(selector) {
						// Find all matching elements
						const elements = document.querySelectorAll(selector);

						elements.forEach(element => {
								// Add a visual cue that the element is copyable
								element.style.cursor = 'pointer';

								// Optional: Add a title attribute for tooltip
								if (!element.title) {
								element.title = 'Click to copy text';
								}

								// Add click event listener
								element.addEventListener('click', function() {
										// Get the text content of the element
										const textToCopy = this.textContent;

										// Try modern Clipboard API first
										if (navigator.clipboard && navigator.clipboard.writeText) {
										navigator.clipboard.writeText(textToCopy)
										.then(() => showCopySuccess(this))
										.catch(err => {
												console.warn('Clipboard API failed:', err);
												// Try fallback method
												fallbackCopyTextToClipboard(textToCopy, this);
												});
										} else {
										// Use fallback for browsers without Clipboard API
										fallbackCopyTextToClipboard(textToCopy, this);
										}
										});
						});

						// Fallback copy method for older browsers
						function fallbackCopyTextToClipboard(text, element) {
							// Create temporary input element
							const textArea = document.createElement('textarea');
							textArea.value = text;

							// Make the textarea out of viewport
							textArea.style.position = 'fixed';
							textArea.style.left = '-999999px';
							textArea.style.top = '-999999px';
							document.body.appendChild(textArea);

							// Support for iOS
							textArea.contentEditable = true;
							textArea.readOnly = false;

							// Select the text
							textArea.focus();
							textArea.select();

							let success = false;
							try {
								// Execute copy command
								success = document.execCommand('copy');
							} catch (err) {
								console.error('Fallback copy failed:', err);
							}

							// Clean up
							document.body.removeChild(textArea);

							if (success) {
								showCopySuccess(element);
							} else {
								alert('Unable to copy text to clipboard');
							}
						}

						// Visual feedback function
						function showCopySuccess(element) {
							const originalBackground = element.style.backgroundColor;
							element.style.backgroundColor = '#c8f7c5'; // Light green for success

							// Reset background after short delay
							setTimeout(() => {
									element.style.backgroundColor = originalBackground;
									}, 500);

							// Optional: Add a small tooltip or message
							const msg = document.createElement('div');
							msg.textContent = 'Copied!';
							msg.style.position = 'absolute';
							msg.style.left = '50%';
							msg.style.transform = 'translateX(-50%)';
							msg.style.bottom = '-20px';
							msg.style.backgroundColor = 'rgba(0,0,0,0.7)';
							msg.style.color = 'white';
							msg.style.padding = '4px 8px';
							msg.style.borderRadius = '4px';
							msg.style.fontSize = '12px';
							msg.style.zIndex = '1000';

							// Ensure the element can handle absolute positioning of the tooltip
							if (window.getComputedStyle(element).position === 'static') {
								element.style.position = 'relative';
							}

							element.appendChild(msg);
							setTimeout(() => element.removeChild(msg), 1500);

							console.log('Text copied to clipboard:', text);
						}
					}
					makeElementsCopyable("#booking-codes-message")
					</script>
				</div>
			</div>
			<div class="admin-panel">
				<h3>Customer Details</h3>
				<p><strong>Name: </strong>{{.CustomerName}}</p>
				<p>
					<strong>Phone: </strong>
					<a href="javascript:void(0)"
						 onclick="sendSMS('{{ .CustomerPhone }}', '{{ .BookingCodesMessage }}')">{{.CustomerPhone}}</a>
					<script>
						// Function to handle SMS links with correct encoding
						function sendSMS(phoneNumber, message) {
							// Clean the phone number
							phoneNumber = phoneNumber.replace(/\D/g, '');

							// For iOS devices (they handle spaces differently)
							if (/iPad|iPhone|iPod/.test(navigator.userAgent)) {
								// On iOS, use ampersand and body parameter
								window.location.href = 'sms:' + phoneNumber + '&body=' + encodeURIComponent(message);
							} else {
								// For Android and other devices
								window.location.href = 'sms:' + phoneNumber + '?body=' + encodeURIComponent(message);
							}

							return false; // Prevent default link behavior
						}
					</script>
				</p>
				<p><strong>Email: </strong>{{.CustomerEmail}}</p>
				<hr>
				<h3>Booking Details</h3>
                <p><strong>Transaction ID: </strong>{{.TransactionId}}</p>
				<p><strong>Created At: </strong>{{.CreatedAt.Format "2006-01-02 15:04"}}</p>
				<p><strong>Last Updated: </strong>{{.UpdatedAt.Format "2006-01-02 15:04"}}</p>
				<p><strong>Paid: </strong>{{if eq .Status "paid"}}{{.PaidAt.Format "2006-01-02 15:04"}}{{else}} {{end}}</p>
			</div>
			<div>
					<button class="admin-update" onclick="window.location.href='/admin/bookings/{{.Id}}/edit'">Update</button>
					<button type="button" onclick="togglePaymentForm({{.Id}})" {{if eq .Status "paid"}}disabled{{end}}>Mark paid</button>
					<form id="payment-form-{{.Id}}" action="/admin/bookings/{{.Id}}/paid" method="PUT" class="mark-paid" style="display: none;" onsubmit="return confirm('Are you sure you want to mark this booking as paid?');">
						<input type="hidden" name="status" value="paid">
						<label for="payment-method-{{.Id}}">Payment Method:</label>
						<select id="payment-method-{{.Id}}" name="payment_method" required>
							<option value="" disabled selected>Select a payment method</option>
							<option value="in_studio_cash">Pay At Studio - Cash</option>
							<option value="in_studio_link">Pay At Studio - Link</option>
							<option value="in_studio_sumup">Pay At Studio - SumUp</option>
							<option value="invoice">Invoice</option>
							<option value="online">Online</option>
							<option value="regulars">Weekly Regulars</option>
							<option value="internal">Internal Bookings</option>
						</select>
						<button type="submit">Submit</button>
					</form>
					<script>
						function togglePaymentForm(id) {
							const form = document.getElementById(`payment-form-${id}`);
							form.style.display = form.style.display === 'none' ? 'block' : 'none';
						}
					</script>
					<form action="/admin/bookings/{{.Id}}/cancel" method="PUT" class="mark-cancelled" onsubmit="return confirm('Are you sure you want cancel this booking?');">
						<input type="hidden" name="status" value="cancelled">
						<button type="submit">Cancel</button>
					</form>
					<form action="/admin/bookings/{{.Id}}" method="DELETE" onsubmit="return confirm('Are you sure you want to delete this booking?');">
						<button>Delete</button>
					</form>	
			</div>
		</div>
		{{ end }}
	{{ end }}
	</div>
</div>
<script src="/static/js/admin/date-picker-events.js"></script>

{{end}}
