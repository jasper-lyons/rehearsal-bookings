{{template "layout.html.tmpl" .}}

{{define "body"}}
<script defer src="https://gateway.sumup.com/gateway/ecom/card/v2/sdk.js"></script>
<h1>Create a new booking</h1>

<form id="form" method="POST" action="/" class="max-w-lg mx-auto p-6">
	<!-- CSRF Protection -->
	<input type="hidden" name="csrf_token" value="{{.CSRFToken}}">

	<div id="session-types">
		<!--  Toggle buttons for selecting solo or band sessions -->
		<div id="session-type-container">
			<button type="button" class="toggle-button selected" data-value="band" onclick="selectButton(this)">Band</button>
			<button type="button" class="toggle-button" data-value="solo" onclick="selectButton(this)">Solo</button>

			<!-- Hidden input to store the selected session type -->
			<input type="hidden" id="session-type" name="type" value="band">
		</div>
		<!-- Session type information box -->
		<div id="info-box" class="info-box">
			<p>Rehearsal session for up to six people</p>
		</div>
	</div>

	<!--  Date picker for booking -->
	<div class="date-picker-container">
		<button type="button" id="prev-day">← Previous</button>
		<input type="date" id="date-input" name="date">
		<button type="button" id="next-day">Next →</button>
		<script>
			// Initialize the current date and define the range
			const currentDate = new Date();
			const minDate = new Date(currentDate); 	// Start of the range (today)
			const maxDate = new Date(currentDate); // End of the range (90 days from today)
			maxDate.setDate(maxDate.getDate() + 90);
	
			// define the selectedDate - by default this is the current date
			let selectedDate = new Date(currentDate);
			let isWeekday = selectedDate.getDay() >= 1 && selectedDate.getDay() <= 5; // Monday = 1, Friday = 5
	
			// Update the displayed date and button states
			function updateDatePicker(animated = false) {
				const datePicker = document.getElementById('date-input');
				isWeekday = selectedDate.getDay() >= 1 && selectedDate.getDay() <= 5; // Monday = 1, Friday = 5
				datePicker.min = minDate.toLocaleDateString('en-CA');
				datePicker.max = maxDate.toLocaleDateString('en-CA');
				datePicker.value = selectedDate.toLocaleDateString('en-CA');
				document.getElementById('prev-day').disabled = selectedDate <= minDate;
				document.getElementById('next-day').disabled = selectedDate >= maxDate;

				// Trigger animation
				if (animated) {
					datePicker.classList.add('animate');
					setTimeout(() => datePicker.classList.remove('animate'), 150); // Match the animation duration
				}
        	}
	
			// Add event listeners for buttons
			document.getElementById('prev-day').addEventListener('click', () => {
				if (selectedDate > minDate) {
					selectedDate.setDate(selectedDate.getDate() - 1); // Move one day back
					updateDatePicker(animated = true);
					clearSelection(); // clear the time slot selection when date changes
				}
			});
	
			document.getElementById('next-day').addEventListener('click', () => {
				if (selectedDate < maxDate) {
					selectedDate.setDate(selectedDate.getDate() + 1); // Move one day forward
					updateDatePicker(animated = true);
					clearSelection(); // clear the time slot selection when date changes
				}
			});

			// Add event listener for the date picker input
			document.getElementById('date-input').addEventListener('change', (e) => {
				const newDate = new Date(e.target.value);
				if (newDate >= minDate && newDate <= maxDate) {
					selectedDate = newDate;
					updateDatePicker();
					clearSelection(); // clear the time slot selection when date changes
				}
			});
	
			// Initialize the display and hidden input with today's date
			updateDatePicker();
		</script>	
	</div>


	<!-- Time & Room Selection -->
	<div id="time-slot-container">
		<table>
			<thead>
				<tr>
					<th>Hour</th>
					<th>Room 1</th>
					<th>Room 2</th>
				</tr>
			</thead>
			<tbody>
				<!-- Generate time slots dynamically -->
				<script>
					const startHour = 10; // 12 AM
					const endHour = 22; // 10 PM (Last booking to finish at 11pm)

					function formatHour(hour_value)  {
						return `${hour_value.toString().padStart(2, '0')}:00`;
					}
					
					for (let hour = startHour; hour <= endHour; hour++) {
						const formattedHour = formatHour(hour);
						document.write(`
							<tr>
								<td>${formattedHour}</td>
								<td class="time-slot" data-room="room1" data-time="${hour}"></td>
								<td class="time-slot" data-room="room2" data-time="${hour}"></td>
							</tr>
						`);
					}
				</script>
			</tbody>
		</table>

		<!-- Hidden input to store the room, time & durations -->
		<input type="hidden" id="start-time" name="start-time">
		<input type="hidden" id="end-time" name="end-time">
		<input type="hidden" id="room" name="room">
		<input type="hidden" id="duration" name="duration" value="1">

		<div id="timeslot_output"></div>

		<script>
			// Initialize variables for time slot selection
			const timeSlots = document.querySelectorAll('.time-slot');
			let startSlot = null;
			let endSlot = null;
			let selectedRoom = null;

			// Function to clear the selection and reset the variables 
			// This is needed so that users can book more than one room or time-range
			// This function is also called by updateDatePicker()
			function clearSelection() {
				timeSlots.forEach(slot => {
					slot.classList.remove('selected');
					if (isWeekday && slot.dataset.time < 12) {
						slot.classList.add('unavailable');
					} else {
						slot.classList.remove('unavailable');
					}
				});

				startSlot = null;
				endSlot = null;
				selectedRoom = null;
				timeslot_output.innerHTML = null;
			}

			// Function for initialising the first time slot (used on odd clicks, 1, 3 etc...)
			function selectFirstSlot(slot) {
				clearSelection();
				startSlot = slot;
				selectedRoom = slot.dataset.room;
				slot.classList.add('selected', 'grabbing');
			}

			// Function to select slots between start and end
			function selectSlotsBetween(start, end) {
				const startTime = parseInt(start.dataset.time, 10);
				const endTime = parseInt(end.dataset.time, 10);
				const room = start.dataset.room;

				timeSlots.forEach(slot => {
					const slotTime = parseInt(slot.dataset.time, 10);
					if (
						slot.dataset.room === room &&
						slotTime >= Math.min(startTime, endTime) &&
						slotTime <= Math.max(startTime, endTime)
					) {
						slot.classList.add('selected');
					}
            	});
			}

			// Add event listeners for clicking on time slots
			timeSlots.forEach(slot => {
				slot.addEventListener('click', () => {
					if (!slot.classList.contains('unavailable')) {
						if (!startSlot) {
							// First click: set the start slot
							selectFirstSlot(slot);
						} else if (!endSlot && slot.dataset.room === selectedRoom) {
							// Second click: set the end slot and select all in between
							endSlot = slot;
							selectSlotsBetween(startSlot, endSlot);

							const startTimeValue = parseInt(startSlot.dataset.time, 10);
							const endTimeValue = parseInt(endSlot.dataset.time, 10);
							const formattedStartTime = formatHour(Math.min(startTimeValue, endTimeValue));
							const formattedEndTime = formatHour(Math.max(startTimeValue, endTimeValue) + 1);
							const formattedRoom = selectedRoom === 'room1' ? 'Room 1' : 'Room 2';

							// Save the data to the hidden inputs
							document.getElementById('start-time').value = formattedStartTime;
							document.getElementById('end-time').value = formattedEndTime;
							document.getElementById('room').value = formattedRoom;
							document.getElementById('duration').value = Math.abs(startTimeValue - endTimeValue) + 1;

							// Trigger the change event on the duration input to update the price
							document.getElementById('duration').dispatchEvent(new Event('change'));

							// print the selection for user to see room/time details
							timeslot_output.innerHTML = `
								<h2>YOUR SELECTION</h2>
								<h2><strong>${formattedRoom}</strong>: ${formattedStartTime} - ${formattedEndTime} </h2>
							`;

							timeSlots.forEach(slot => slot.classList.remove('grabbing'));
						} else {
							// Third click: clear the selection and start again
							selectFirstSlot(slot);
						}
					}
				});

				// On mouse over, if dragging, add the slots affected to the selectedSlots array
				slot.addEventListener('mouseover', () => {
					if (startSlot && !endSlot) {
						if (selectedRoom === slot.dataset.room) {
							slot.classList.add('grabbing');						
						}
					}
				});
			});
		</script>
	</div>

	<!-- Customer Details -->
	<div class="mb-4">
		<label class="block mb-2" for="name">Full Name</label>
		<input type="text" 
				id="name"
				name="name" 
				pattern="[A-Za-z0-9 ]+" 
				class="w-full p-2 border rounded">
	</div>

	<div class="mb-4">
		<label class="block mb-2" for="email">Email</label>
		<input type="email"
				id="email" 
				name="email"
				class="w-full p-2 border rounded">
	</div>

   	<div class="mb-4">
       <label class="block mb-2" for="phone">Phone</label>
       <input type="tel"
              id="phone"
              name="phone"
              pattern="[0-9]{11}"
              class="w-full p-2 border rounded">
	</div>

	<!-- Price Calculations-->
	<div id="price-box" class="floating-box">
		<script>
			function updatePrice() {
				let price = document.getElementById('price')
				let session_type = document.getElementById('session-type')
				let duration = document.getElementById('duration')

				if (selectedRoom) {
					switch (session_type.value) {
					case 'solo':
						price.textContent = `£${(parseInt(duration.value, 10) * 6.50).toFixed(2)}`
						break;
					case 'band':
						if (duration.value > 9) {
							price.textContent = `£100.00`
						} else if (duration.value > 3) {
							price.textContent = `£${(parseInt(duration.value, 10) * 10.00).toFixed(2)}`
						} else {
							price.textContent = `£${(parseInt(duration.value, 10) * 12.00).toFixed(2)}`
						}
						break;
					}
				} else {
					price.textContent = '£0.00'
				}
			}

			function selectButton(button) {
				// Deselect all buttons
				const buttons = document.querySelectorAll('.toggle-button');
				const infoBox = document.getElementById('info-box');
				buttons.forEach(btn => btn.classList.remove('selected'));

				// Select the clicked button
				button.classList.add('selected');

				// Update and show the information box content
        		if (button.dataset.value === 'band') {
					infoBox.innerHTML = '<p>Rehearsal session for up to six people</p>';
				} else if (button.dataset.value === 'solo') {
					infoBox.innerHTML = '<p align=right>Rehearsal session for one person</p>';
				}

				// Save the selected value to type input
				document.getElementById('session-type').value = button.getAttribute('data-value');
			}

			window.addEventListener('load', function () {
				let session_type = document.getElementById('session-type')
				let duration = document.getElementById('duration')
				let buttons = document.querySelectorAll('.toggle-button');

				// event listeners for input changes
				session_type.addEventListener('change', updatePrice)
				duration.addEventListener('change', updatePrice)

				// event listeners for toggle buttons
				buttons.forEach(button => {
            		button.addEventListener('click', function (e) {
                		e.preventDefault(); // Prevent form submission
                		selectButton(button);
                		session_type.dispatchEvent(new Event('change')); // Trigger price update
            		});
        		});

				updatePrice()
			})
		</script>
		<span>BOOK NOW:</span>
		<span id="price">£0.00</span>
	 </div>
	<script>
		window.addEventListener('load', function () {
			let form = document.getElementById('form')
			form.addEventListener('submit', async function (e) {
				e.preventDefault()

				// create held booking
				let bookingResponse = await fetch('/bookings', {
					method: 'POST',
					body: JSON.stringify({
						type: document.getElementById('session-type').value,
						name: document.getElementById('name').value,
						email: document.getElementById('email').value,
						phone: document.getElementById('phone').value,
						room: document.getElementById('room').value,
						date: document.getElementById('date-input').value,
						start_time: document.getElementById('start-time').value,
						duration: parseInt(document.getElementById('duration').value, 10),
					}),
					headers: {
						'Content-Type': 'application/json'
					}
				})

				if (!bookingResponse.ok) {
					alert("Can't book ", document.getElementById('room').value, " at that time!")
					return
				}

				let booking = await bookingResponse.json()

				// create charge
				let checkoutResponse = await fetch('/sumup/checkouts', {
					method: 'POST',
					body: JSON.stringify({
						amount: parseFloat(document.getElementById('price').textContent.replace('£', '')),
						checkout_reference: `booking-${booking.id}`
					}),
					headers: {
						'Content-Type': 'application/json'
					}
				})

				if (!checkoutResponse.ok) {
					alert("Payment provider failed, please reach out!")
					return
				}

				let checkout = await checkoutResponse.json()

				// open sumup UI
				SumUpCard.mount({
					id: 'sumup-card',
					checkoutId: checkout.id,
					onResponse: async function (type, body) {
						switch (type) {
							case "sent":
								break;
							case "success":
								// TODO: Confirm booking
								let confirmBookingResponse = await fetch(`/bookings/${booking.id}/confirm`, {
									method: 'POST',
									body: JSON.stringify(body),
									headers: {
										'Content-Type': 'application/json'
									}
								})

								// TODO: Display success, perhaps redirect?
								document.getElementById('sumup-card').style.display = "none"
								document.getElementById('success').style.display = "block"
								break;
							case "error":
								// TODO: Handle error
								break;
						}
					}
				})
			})
		})
	</script>
   <button type="submit"
	 					id="submit"
           class="w-full bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
       Book Room
   </button>
</form>
<div id="sumup-card"></div>
<div id="success" style="display: none">
	<h1>Booking Successful! You should recieve a text and email comfirming your booking shortly.</h1>
</div>
{{end}}
